(function($, w, r, l, t)
{
	if(r.Lang)
	{
		return;
	}
	
	console.log('woohoo loader from version directory with uglifyjs 2 123');
	var replaceAll = function(str, search, replace)
	{
		return str.replace(new RegExp(search, 'g'), replace);
	};
	r.Lang = {
		storage: {},
		language: "ru",
		add: function(lang, code, value)
		{
			if(!this.storage[lang])
			{
				this.storage[lang] = {};
			}
			this.storage[lang][code] = value;
		},
		addLang: function(lang, data)
		{
			if(!lang || !data)
			{
				return;
			}
			for(var k in data)
			{
				if(data.hasOwnProperty(k))
				{
					this.add(lang, k, data[k]);
				}
			}
		},
		addLangs: function(langs)
		{
			if(!langs)
			{
				return;
			}
			for(var l in langs)
			{
				if(langs.hasOwnProperty(l))
				{
					this.addLang(l, langs[l]);
				}
			}
		},
		getMessage: function(code, replace, lang)
		{
			if(!lang && this.language)
			{
				lang = this.language;
			}
			if(!lang)
			{
				throw new Error("You shound enter language code");
			}
			var result = this.storage[lang][code] || "";
			if(replace)
			{
				for(var k in replace)
				{
					if(replace.hasOwnProperty(k))
					{
						result = replaceAll(result, k, replace[k]);
					}
				}
			}
			return result;
		},
		getMessages: function(lang)
		{
			if(!lang && this.language)
			{
				lang = this.language;
			}
			return (this.storage[lang]) ? Object.keys(this.storage[lang]) : {};
		}
	};
	l.Css = {
		load: function(file, options)
		{
			var o = (options) ? options : {},
				h = document.getElementsByTagName('head')[0],
				e = document.createElement("link");
			e.rel = (o.rel) ? o.rel : "stylesheet", e.type = "text/css", e.href = file;
			if(o.callback && typeof (o.callback) === "function")
			{
				var called = false,
					_f = {
						f: function()
						{
							if(!called)
							{
								called = true;
								o.callback();
							}
						}
					};
				if(e.readyState)
				{
					e.onreadystatechange = function()
					{
						if(e.readyState === "loaded" || e.readyState === "complete")
						{
							e.onreadystatechange = null;
							_f.f();
						}
					};
				}
				else
				{
					e.onload = function()
					{
						_f.f();
					};
				}
				var t = setInterval(function()
				{
					if(called)
					{
						clearInterval(t);
						return;
					}
					if(typeof (document.styleSheets) !== "undefined")
					{
						for(var i = 0; i < document.styleSheets.length; i++)
						{
							var p = document.styleSheets[i].href || "",
								a = (!file.match(/^http(s?):/i)) ? p.replace(/^http(s?):/i, "") : p;
							if(a === file)
							{
								clearInterval(t);
								_f.f();
							}
						}
						return;
					}
					_f.f();
				}, 100);
			}
			h.appendChild(e);
		},
		loadList: function(styles, callback)
		{
			var files = (Array.isArray(styles)) ? styles : [styles];
			var loaded = [];
			for(var i = 0; i < files.length; i++)
			{
				this.load(files[i], {
					callback: function()
					{
						loaded.push(files[i]);
						if(callback && typeof (callback) === "function" && loaded.length >= files.length)
						{
							callback();
						}
					}
				});
			}
		}
	};
	var __load_js_array = function(t, n, e)
	{
		var self = this, i = 0,
			o = function(t, n)
			{
				__load_js_one(t[i], n[i], function()
				{
					i++, i < t.length ? o(t, n) : e && "function" === typeof e && e();
				});
			};
		o(t, n);
	};
	var __load_js_one = function(t, n, e)
	{
		if(typeof (w.requirejs) === "function")
		{
			require([t], e);
			return;
		}
		(n = document.createElement("script")).onload = function()
		{
			e();
		}, n.src = t, document.getElementsByTagName("head")[0].appendChild(n);
	};
	l.Js = {
		load: function(file, callback)
		{
			this.loadList([file], callback);
		},
		loadList: function(files, callback)
		{
			var list = (Array.isArray(files)) ? files : [files];
			__load_js_array(list, [], callback);
		}
	};
	var storage = {};
	t.Storage = {
		add: function(i, t)
		{
			if(!storage[i])
			{
				storage[i] = t;
			}
		},
		get: function(i, k)
		{
			return (k) ? storage[i][k] : storage[i];
		},
		getList: function()
		{
			return Object.keys(storage);
		}
	};
	r.AjaxProccessor = {
		proccess: function(data)
		{
			if(data && typeof (data) === "object")
			{
				if(data.templates)
				{
					for(var k in data.templates)
					{
						if(data.templates.hasOwnProperty(k))
						{
							t.Storage.add(k, data.templates[k]);
						}
					}
				}
				if(data.langs)
				{
					r.Lang.addLangs(data.langs);
				}
			}
		}
	};
	$(function()
	{
		if(typeof (window.reservi_included) === "undefined")
		{
			$.get(location.protocol + "//reservi.ru/4.0/?state=init&ver=2.063&client=28246318", function(data)
			{
				if(data)
				{
					var _b = $("body");
					if(data["system"])
					{
						r.AjaxProccessor.proccess(data["system"]);
					}
					var tpl = t.Storage.get("skeleton");
					if(tpl && tpl["body"])
					{
						_b.append(tpl["body"]);
					}
					if(data["data"])
					{
						if(data["data"]["map"] !== false)
						{
							r.show_map = true;
						}
						if(data["data"].salons)
						{
							r.salons = data["data"].salons;
							var _initSalons = ("").split(",");
							if(_initSalons.length > 0)
							{
								for(var k = 0; k < _initSalons.length; k++)
								{
									if(_initSalons[k])
									{
										if($("[data-salon='" + _initSalons[k] + "']").filter(".widget_reservi_loader_4,.widget_reservi_loader").length <= 0)
										{
											_b.append('<div style="display: none;" class="widget_reservi_loader" data-salon="' + _initSalons[k] + '"></div>');
										}
									}
									
								}
							}
							if(data["data"]["salons"] && data["data"]["salons"].length > 0)
							{
								var _b = $("body"),
									_salons = _b.find(".widget_reservi_loader_4,.widget_reservi_loader");
								if(_salons.length <= 0)
								{
									for(var k = 0; k < data["data"]["salons"].length; k++)
									{
										var _cur = data["data"]["salons"][k];
										_b.append('<div style="display: none;" class="widget_reservi_loader_4" data-salon="' + _cur + '"></div>');
									}
								}
							}
						}
						if(data["data"].css && data["data"].css.length > 0)
						{
							l.Css.loadList(data["data"].css);
						}
						if(data["data"].js && data["data"].js.length > 0)
						{
							l.Js.loadList(data["data"].js);
						}
					}
				}
			}, "json");
			window.reservi_included = true;
			r.version = "2.063";
			r.organization = parseInt("28246318");
		}
	});
})(jQuery, window, window.ReserviCloud = window.ReserviCloud || {}, window.ReserviCloud.Loader = window.ReserviCloud.Loader || {}, window.ReserviCloud.Templates = window.ReserviCloud.Templates || {});